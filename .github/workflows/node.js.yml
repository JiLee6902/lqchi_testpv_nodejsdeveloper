# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches:
      - main  # Trigger on pushes to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/project-image:latest
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Deploy to EC2
        env:
          PRIVATE_SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          # Prepare SSH
          echo "$PRIVATE_SSH_KEY" > private_key
          chmod 600 private_key
          
          # SSH into EC2 and deploy
          ssh -o StrictHostKeyChecking=no -i private_key $EC2_USERNAME@$EC2_HOST << EOF
            # Update system
            sudo apt-get update
            
            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get install -y docker.io docker-compose
            fi
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Create directory for project
            mkdir -p ~/app
            cd ~/app
            
            # Copy environment variables file
            cat > .env << EOL
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            MONGODB_MAX_POOL_SIZE=${{ secrets.MONGODB_MAX_POOL_SIZE }}
            MONGODB_SERVER_TIMEOUT=${{ secrets.MONGODB_SERVER_TIMEOUT }}
            MONGODB_HEARTBEAT_FREQUENCY=${{ secrets.MONGODB_HEARTBEAT_FREQUENCY }}
            EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
            EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
            AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
            AWS_BUCKET_ACCESS_KEY=${{ secrets.AWS_BUCKET_ACCESS_KEY }}
            AWS_BUCKET_SECRET_KEY=${{ secrets.AWS_BUCKET_SECRET_KEY }}
            AWS_BUCKET_CLOUDFRONT_URL=${{ secrets.AWS_BUCKET_CLOUDFRONT_URL }}
            EOL
            
            # Copy docker-compose.yml and Dockerfile from GitHub
            scp -o StrictHostKeyChecking=no -i ~/private_key docker-compose.yml Dockerfile.prod $EC2_USERNAME@$EC2_HOST:~/app/
            
            # Pull latest images and start containers
            sudo docker-compose pull
            sudo docker-compose up -d
            
            # Cleanup old images
            sudo docker image prune -f
          EOF
          
          # Remove SSH key
          rm private_key
